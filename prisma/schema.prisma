generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://funny_user:funny_password@localhost:5440/policonsultorio"
}

model User {
  id          Int          @id @default(autoincrement())
  nombre      String
  email       String       @unique
  password    String
  rol         Role         @default(MESA_ENTRADA)
  profesional Profesional?
  cancelacionesRegistradas TurnoCancelacionLog[] @relation("TurnoCanceladoPor")
}

model ObraSocial {
  id            Int                     @id @default(autoincrement())
  nombre        String
  estado        EstadoObraSocial
  pacientes     Paciente[]
  profesionales ProfesionalObraSocial[]
}

model Profesional {
  id             Int                     @id @default(autoincrement())
  nombre         String
  apellido       String
  direccion      String
  dni            String                  @unique @db.VarChar(9)
  especialidad   String
  telefono       String                  @db.VarChar(14)
  userId         Int?                    @unique
  historias      HistoriaClinica[]
  user           User?                   @relation(fields: [userId], references: [id])
  obras_sociales ProfesionalObraSocial[]
  turnos         Turno[]
}

model ProfesionalObraSocial {
  id             Int         @id @default(autoincrement())
  id_obra_social Int
  id_profesional Int
  obra_social    ObraSocial  @relation(fields: [id_obra_social], references: [id])
  profesional    Profesional @relation(fields: [id_profesional], references: [id])
}

model Paciente {
  id               Int               @id @default(autoincrement())
  nombre           String
  apellido         String
  dni              String            @unique @db.VarChar(9)
  direccion        String
  fecha_nacimiento DateTime
  fecha_registro   DateTime          @default(now())
  telefono         String            @db.VarChar(14)
  antecedentes     String?
  id_obra_social   Int?
  num_obra_social  String?
  historias        HistoriaClinica[]
  obra_social      ObraSocial?       @relation(fields: [id_obra_social], references: [id])
  turnos           Turno[]
}

model HistoriaClinica {
  id              Int         @id @default(autoincrement())
  id_paciente     Int
  id_profesional  Int
  fecha           DateTime    @default(now())
  motivo          String
  detalle         String
  examen_fisico   String?
  signos_vitales  Json?
  diagnostico     String
  tratamiento     String?
  medicamentos    Json?
  estudios        Json?
  indicaciones    String?
  observaciones   String?
  proximo_control DateTime?
  paciente        Paciente    @relation(fields: [id_paciente], references: [id])
  profesional     Profesional @relation(fields: [id_profesional], references: [id])
}

model Turno {
  id               Int         @id @default(autoincrement())
  id_profesional   Int
  id_paciente      Int
  duracion_minutos Int         @default(30)
  fecha            DateTime
  estado           EstadoTurno
  paciente         Paciente    @relation(fields: [id_paciente], references: [id])
  profesional      Profesional @relation(fields: [id_profesional], references: [id])
  cancelaciones    TurnoCancelacionLog[]
}

model TurnoCancelacionLog {
  id             Int                  @id @default(autoincrement())
  turnoId        Int
  canceladoPorId Int?
  solicitadoPor  CancelacionOrigen
  fecha          DateTime             @default(now())
  turno          Turno                @relation(fields: [turnoId], references: [id])
  canceladoPor   User?                @relation("TurnoCanceladoPor", fields: [canceladoPorId], references: [id])

  @@unique([turnoId])
}

enum Role {
  MESA_ENTRADA
  PROFESIONAL
  GERENTE
}

enum EstadoObraSocial {
  ACTIVA
  INACTIVA
}

enum EstadoTurno {
  PROGRAMADO
  EN_SALA_ESPERA
  ASISTIO
  NO_ASISTIO
  CANCELADO
}

enum CancelacionOrigen {
  PACIENTE
  PROFESIONAL
}
